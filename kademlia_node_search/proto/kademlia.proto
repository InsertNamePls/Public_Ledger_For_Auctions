syntax = "proto3";

package kademlia;

// The Node identifier and network address are encapsulated in the NodeInfo message.
message NodeInfo {
    bytes id = 1; // Unique identifier of the node
    string address = 2; // Network address of the node
}

message PingRequest {
    string node_address = 1; // The ID of the pinging node
    int64 timestamp = 2; // Message timestamp to avoid replay attacks
    bytes signature = 3; // Encrypted Message for man-in-the-middle attacks 
    bytes sender_public_key = 4; // The Sender Public Key
}

message PingResponse {
    bool isOnline = 1; // Whether the pinged node is online
    bytes node_id = 2; // The Target node ID
}

message StoreRequest {
    bytes key = 1; // Key of the key-value pair
    bytes value = 2; // Value of the key-value pair
    int64 timestamp = 3; // Message timestamp to avoid replay attacks
    bytes signature = 4; // Encrypted Message for man-in-the-middle attacks 
    bytes sender_public_key = 5; // The Sender Public Key
}

message StoreResponse {
    bool success = 1; // Whether the STORE operation was successful
}

message FindNodeRequest {
    bytes requesterNodeId = 1; // ID of the node requesting
    string requesterNodeAddress = 2; // Address of the node requesting
    bytes targetNodeId = 3; // ID of the node being searched for
    int64 timestamp = 4; // Message timestamp to avoid replay attacks
    bytes signature = 5; // Encrypted Message for man-in-the-middle attacks 
    bytes sender_public_key = 6; // The Sender Public Key
}

message FindNodeResponse {
    repeated NodeInfo nodes = 1; // List of closest nodes to the target ID
}

message FindValueRequest {
    bytes key = 1; // Key for which the value is being searched
    int64 timestamp = 2; // Message timestamp to avoid replay attacks
    bytes signature = 3; // Encrypted Message for man-in-the-middle attacks 
    bytes sender_public_key = 4; // The Sender Public Key
}

message FindValueResponse {
    bytes value = 1; // Value associated with the key, if found
    repeated NodeInfo nodes = 2; // List of closest nodes to the key, if value not found
}

service Kademlia {
    rpc Ping(PingRequest) returns (PingResponse);
    rpc Store(StoreRequest) returns (StoreResponse);
    rpc FindNode(FindNodeRequest) returns (FindNodeResponse);
    rpc FindValue(FindValueRequest) returns (FindValueResponse);
}
